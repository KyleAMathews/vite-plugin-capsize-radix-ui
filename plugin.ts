// src/myVitePlugin.ts
import { Plugin } from "vite"
import fs from "fs"
import {
  createStyleObject,
  createStyleString,
  createFontStack,
  FontMetrics,
} from "@capsizecss/core"
import Mustache from "mustache"

const template = `/* Auto-generated by scripts/generate-typography-styles.ts */
/* Override Radix variables */
.radix-themes {
  --default-font-family: {{{defaultFontStack.fontFamily}}};
  --em-font-family: {{{defaultFontStack.fontFamily}}};
  --quote-font-family: {{{defaultFontStack.fontFamily}}};
  --heading-font-family: {{{headingFontStack.fontFamily}}};
{{#fontData}}
  --font-size-{{{i}}}: {{{fontSize}}};
  --line-height-{{{i}}}: {{{lineHeight}}};
{{/fontData}}
}

/* Otherwise gets doesn't sit inline */
.rt-Link {
  display: inline-block;
}

/* Default text styles */
{{{textStyle}}}

/* Em text styles */
{{{emStyles}}}

/* Quote text styles */
{{{quoteStyles}}}

.rt-Em, .rt-Quote {
  display: inline-block;
}

/* Class names for text elements */
{{#fontData}}
{{{style}}}
{{/fontData}}
`

async function generate(options) {
  const fontData = options.fontSizes.map((fontSize, i) => {
    const lineGap = options.lineHeights[i] - fontSize
    const style = createStyleString(
      `rt-r-size-${i + 1}:not(.rt-DialogContent)`,
      {
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack[0],
      }
    )
    return {
      style,
      ...createStyleObject({
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack[0],
      }),
      i: i + 1,
    }
  })
  const defaultFontStack = createFontStack(options.defaultFontStack)
  let headingFontStack
  if (options.headingFontStack) {
    headingFontStack = createFontStack(options.headingFontStack)
  } else {
    headingFontStack = defaultFontStack
  }

  const textStyle = createStyleString(`rt-Text`, {
    capHeight: options.fontSizes[2],
    lineGap: options.lineHeights[2] - options.fontSizes[2],
    fontMetrics: options.defaultFontStack[0],
  })
  const emStyles = createStyleString(`rt-Em`, {
    capHeight: options.fontSizes[2],
    lineGap: options.lineHeights[2] - options.fontSizes[2],
    fontMetrics: options.defaultFontStack[0],
  })
  const quoteStyles = createStyleString(`rt-Quote`, {
    capHeight: options.fontSizes[2],
    lineGap: options.lineHeights[2] - options.fontSizes[2],
    fontMetrics: options.defaultFontStack[0],
  })

  fs.writeFileSync(
    options.outputPath,
    Mustache.render(template, {
      headingFontStack,
      defaultFontStack,
      fontData,
      textStyle,
      emStyles,
      quoteStyles,
    })
  )
}

export function radixCapsizePlugin({
  outputPath,
  fontSizes = [8, 10, 12, 14, 18, 24, 30, 48, 60],
  lineHeights = [18, 23, 25, 28, 36, 44, 42, 52, 60],
  defaultFontStack,
  headingFontStack,
}: {
  outputPath: string
  fontSizes?: number[]
  lineHeights?: number[]
  defaultFontStack: FontMetrics[]
  headingFontStack?: FontMetrics[]
}): Plugin {
  return {
    name: `radix-capsize-plugin`,
    buildStart() {
      generate({
        outputPath,
        fontSizes,
        lineHeights,
        defaultFontStack,
        headingFontStack,
      })
    },
    // configureServer(server) {
    // // Use Vite's internal file watcher to re-run the build function on file change
    // server.watcher.add()

    // server.watcher.on(`change`, (changedPath) => {
    // if (changedPath === resolvedPath) {
    // console.log(`Detected change in ${resolvedPath}, rebuilding...`)
    // queuedSpawn(`npx`, [`tsx`, `./index.ts`, filePath])
    // }
    // })
    // },
  }
}
