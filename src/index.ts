import { Plugin } from "vite"
import fs from "fs"
import {
  createStyleObject,
  createStyleString,
  createFontStack,
  FontMetrics,
} from "@capsizecss/core"
import Mustache from "mustache"

// Metrics for system fonts
import segoeUI from "@capsizecss/metrics/segoeUI"
import appleSystem from "@capsizecss/metrics/appleSystem"
import roboto from "@capsizecss/metrics/roboto"
import ubuntu from "@capsizecss/metrics/ubuntu"
import notoSans from "@capsizecss/metrics/notoSans"

const template = `/* Auto-generated by scripts/generate-typography-styles.ts */

/* Override Radix variables */
.radix-themes {
  --default-font-family: {{{defaultFontStack.fontFamily}}};
  --em-font-family: {{{defaultFontStack.fontFamily}}};
  --quote-font-family: {{{defaultFontStack.fontFamily}}};
  --heading-font-family: {{{headingFontStack.fontFamily}}};

  /* Mobile */
{{#mobileFontData}}
  --font-size-{{{i}}}: {{{fontSize}}};
  --line-height-{{{i}}}: {{{lineHeight}}};
{{/mobileFontData}}

  /* Larger devices */
  @media (min-width: 768px) {
  {{#fontData}}
    --font-size-{{{i}}}: {{{fontSize}}};
    --line-height-{{{i}}}: {{{lineHeight}}};
  {{/fontData}}
  }
}

/* Otherwise links don't flow inline */
.rt-Link {
  display: inline-block;
}

/* Default text styles */
{{{mobileTextStyles}}}
@media (min-width: 768px) {
  {{{textStyles}}}
}

/* Em text styles */
{{{mobileEmStyles}}}
@media (min-width: 768px) {
  {{{emStyles}}}
}

/* Quote text styles */
{{{mobileQuoteStyles}}}
@media (min-width: 768px) {
  {{{quoteStyles}}}
}

.rt-Em, .rt-Quote {
  display: inline-block;
}

/* Class names for text elements */
{{#mobileFontData}}
{{{style}}}
{{/mobileFontData}}
@media (min-width: 768px) {
  {{#fontData}}
  {{{style}}}
  {{/fontData}}
}
`

async function generate(options: OptionsWithDefaults) {
  let defaultFontStack
  let headingFontStack
  if (!options.defaultFontStack) {
    options.defaultFontStack = [appleSystem, segoeUI, roboto, ubuntu, notoSans]
    defaultFontStack = createFontStack(options.defaultFontStack)

    // We prefer to determanistically pick the font w/ the stack above so then the font trimmings work
    // but we if we can't, we'll fall back to these.
    defaultFontStack.fontFamily += `, ui-sans-serif, system-ui, sans-serif`
  } else if (options.defaultFontStack) {
    defaultFontStack = createFontStack(options.defaultFontStack)
  }

  if (options.headingFontStack) {
    headingFontStack = createFontStack(options.headingFontStack)
  } else {
    headingFontStack = defaultFontStack
  }

  const mobileFontData = [options.fontSizes[0], ...options.fontSizes].map(
    (fontSize, i) => {
      const lineGap = options.lineHeights[i - 1] - fontSize
      const style = createStyleString(
        `rt-r-size-${i + 1}:not(.rt-DialogContent)`,
        {
          capHeight: fontSize,
          lineGap,
          fontMetrics: options.defaultFontStack![0],
        }
      )
      return {
        style,
        ...createStyleObject({
          capHeight: fontSize,
          lineGap,
          fontMetrics: options.defaultFontStack![0],
        }),
        i: i + 1,
      }
    }
  )
  const fontData = options.fontSizes.map((fontSize, i) => {
    const lineGap = options.lineHeights[i] - fontSize
    const style = createStyleString(
      `rt-r-size-${i + 1}:not(.rt-DialogContent)`,
      {
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack![0],
      }
    )
    return {
      style,
      ...createStyleObject({
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack![0],
      }),
      i: i + 1,
    }
  })

  const mobileTextStyles = createStyleString(`rt-Text`, {
    capHeight: options.fontSizes[1],
    lineGap: options.lineHeights[1] - options.fontSizes[1],
    fontMetrics: options.defaultFontStack[0],
  })
  const mobileEmStyles = createStyleString(`rt-Em`, {
    capHeight: options.fontSizes[1],
    lineGap: options.lineHeights[1] - options.fontSizes[1],
    fontMetrics: options.defaultFontStack[0],
  })
  const mobileQuoteStyles = createStyleString(`rt-Quote`, {
    capHeight: options.fontSizes[1],
    lineGap: options.lineHeights[1] - options.fontSizes[1],
    fontMetrics: options.defaultFontStack[0],
  })

  const textStyles = createStyleString(`rt-Text`, {
    capHeight: options.fontSizes[2],
    lineGap: options.lineHeights[2] - options.fontSizes[2],
    fontMetrics: options.defaultFontStack[0],
  })
  const emStyles = createStyleString(`rt-Em`, {
    capHeight: options.fontSizes[2],
    lineGap: options.lineHeights[2] - options.fontSizes[2],
    fontMetrics: options.defaultFontStack[0],
  })
  const quoteStyles = createStyleString(`rt-Quote`, {
    capHeight: options.fontSizes[2],
    lineGap: options.lineHeights[2] - options.fontSizes[2],
    fontMetrics: options.defaultFontStack[0],
  })

  fs.writeFileSync(
    options.outputPath,
    Mustache.render(template, {
      headingFontStack,
      defaultFontStack,
      mobileFontData,
      fontData,
      mobileTextStyles,
      textStyles,
      mobileEmStyles,
      emStyles,
      mobileQuoteStyles,
      quoteStyles,
    })
  )
}
interface Options {
  outputPath: string
  fontSizes?: number[]
  lineHeights?: number[]
  defaultFontStack?: FontMetrics[]
  headingFontStack?: FontMetrics[]
}
interface OptionsWithDefaults {
  outputPath: string
  fontSizes: number[]
  lineHeights: number[]
  defaultFontStack?: FontMetrics[]
  headingFontStack?: FontMetrics[]
}
export function radixCapsizePlugin({
  outputPath,
  fontSizes = [9, 11, 12, 14, 18, 24, 36, 48, 64],
  lineHeights = [21, 24, 26, 27, 29, 36, 44, 52, 64],
  defaultFontStack,
  headingFontStack,
}: Options): Plugin {
  return {
    name: `radix-capsize-plugin`,
    buildStart() {
      generate({
        outputPath,
        fontSizes,
        lineHeights,
        defaultFontStack,
        headingFontStack,
      })
    },
  }
}
