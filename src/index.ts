import { Plugin } from "vite"
import fs from "fs"
import {
  createStyleObject,
  createStyleString,
  createFontStack,
  FontMetrics,
} from "@capsizecss/core"
import Mustache from "mustache"

// Metrics for system fonts
import segoeUI from "@capsizecss/metrics/segoeUI"
import appleSystem from "@capsizecss/metrics/appleSystem"
import roboto from "@capsizecss/metrics/roboto"
import ubuntu from "@capsizecss/metrics/ubuntu"
import notoSans from "@capsizecss/metrics/notoSans"

const template = `/* Auto-generated by vite-plugin-capsize-radix */

/* Override Radix variables */
.radix-themes {
  --default-font-family: {{{defaultFontFamily.fontFamily}}};
  --em-font-family: {{{defaultFontFamily.fontFamily}}};
  --quote-font-family: {{{defaultFontFamily.fontFamily}}};
  --heading-font-family: {{{headingFontFamily.fontFamily}}};
  --code-font-family: {{{codingFontFamily.fontFamily}}};

  /* Mobile */
{{#mobileFontData}}
  --font-size-{{{i}}}: {{{fontSize}}};
  --line-height-{{{i}}}: {{{lineHeight}}};
{{/mobileFontData}}

  /* Larger devices */
  @media (min-width: 768px) {
  {{#fontData}}
    --font-size-{{{i}}}: {{{fontSize}}};
    --line-height-{{{i}}}: {{{lineHeight}}};
  {{/fontData}}
  }
}

/* Otherwise links don't flow inline */
.rt-Link {
  display: inline-block;
}

/* Default text styles */
{{{mobileTextStyles}}}
@media (min-width: 768px) {
  {{{textStyles}}}
}

/* Em text styles */
{{{mobileEmStyles}}}
@media (min-width: 768px) {
  {{{emStyles}}}
}

/* Quote text styles */
{{{mobileQuoteStyles}}}
@media (min-width: 768px) {
  {{{quoteStyles}}}
}

/* Code text styles */
{{{mobileCodeStyles}}}
@media (min-width: 768px) {
  {{{codeStyles}}}
}

/* Code size variants */
{{#mobileCodeFontData}}
{{{style}}}
{{/mobileCodeFontData}}
@media (min-width: 768px) {
  {{#codeFontData}}
  {{{style}}}
  {{/codeFontData}}
}

.rt-Em, .rt-Quote, .rt-Code {
  display: inline-block;
}

/* Class names for text elements */
{{#mobileFontData}}
{{{style}}}
{{/mobileFontData}}
@media (min-width: 768px) {
  {{#fontData}}
  {{{style}}}
  {{/fontData}}
}
`

async function generate(options: OptionsWithDefaults) {
  // Use any type to avoid TypeScript errors with the return type of createFontStack
  let defaultFontFamily: any
  let headingFontFamiliy: any
  let codingFontFamily: any

  if (!options.defaultFontStack) {
    options.defaultFontStack = [
      appleSystem,
      segoeUI,
      roboto,
      ubuntu,
      notoSans,
    ] as unknown as FontMetrics[]
    defaultFontFamily = createFontStack(options.defaultFontStack)

    // We prefer to deterministically pick the font w/ the stack above so then the font trimmings work
    // but we if we can't, we'll fall back to these.
    defaultFontFamily.fontFamily += `, ui-sans-serif, system-ui, sans-serif`
  } else if (options.defaultFontStack) {
    defaultFontFamily = createFontStack(options.defaultFontStack)
  }

  if (options.headingFontStack) {
    headingFontFamiliy = createFontStack(options.headingFontStack)
  } else {
    headingFontFamiliy = defaultFontFamily
  }

  if (options.codingFontStack) {
    codingFontFamily = createFontStack(options.codingFontStack)
  } else {
    options.codingFontStack = [appleSystem] as unknown as FontMetrics[]
    codingFontFamily = createFontStack(options.codingFontStack)

    // We prefer to deterministically pick the font w/ the stack above so then the font trimmings work
    // but we if we can't, we'll fall back to these.
    codingFontFamily.fontFamily += `, ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace`
  }

  const mobileFontData = [
    options.textStyles[0],
    ...options.textStyles.slice(1),
  ].map(({ fontSize, lineHeight }, i) => {
    const lineGap = lineHeight - fontSize
    const style = createStyleString(
      `rt-r-size-${i + 1}:not(.rt-DialogContent)`,
      {
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack![0],
      }
    )
    return {
      style,
      ...createStyleObject({
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack![0],
      }),
      i: i + 1,
    }
  })

  // Generate code-specific styles for each size variant
  const mobileCodeFontData = [
    options.textStyles[0],
    ...options.textStyles.slice(1),
  ].map(({ fontSize, lineHeight }, i) => {
    const lineGap = lineHeight - fontSize
    const style = createStyleString(`rt-Code.rt-r-size-${i + 1}`, {
      capHeight: fontSize,
      lineGap,
      fontMetrics: options.codingFontStack![0],
    })
    return {
      style,
      ...createStyleObject({
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.codingFontStack![0],
      }),
      i: i + 1,
    }
  })

  const fontData = options.textStyles.map(({ fontSize, lineHeight }, i) => {
    const lineGap = lineHeight - fontSize
    const style = createStyleString(
      `rt-r-size-${i + 1}:not(.rt-DialogContent)`,
      {
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack![0],
      }
    )
    return {
      style,
      ...createStyleObject({
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.defaultFontStack![0],
      }),
      i: i + 1,
    }
  })

  // Generate code-specific styles for each size variant for larger screens
  const codeFontData = options.textStyles.map(({ fontSize, lineHeight }, i) => {
    const lineGap = lineHeight - fontSize
    const style = createStyleString(`rt-Code.rt-r-size-${i + 1}`, {
      capHeight: fontSize,
      lineGap,
      fontMetrics: options.codingFontStack![0],
    })
    return {
      style,
      ...createStyleObject({
        capHeight: fontSize,
        lineGap,
        fontMetrics: options.codingFontStack![0],
      }),
      i: i + 1,
    }
  })

  const mobileTextStyles = createStyleString(`rt-Text`, {
    capHeight: options.textStyles[1].fontSize,
    lineGap: options.textStyles[1].lineHeight - options.textStyles[1].fontSize,
    fontMetrics: options.defaultFontStack![0],
  })
  const mobileEmStyles = createStyleString(`rt-Em`, {
    capHeight: options.textStyles[1].fontSize,
    lineGap: options.textStyles[1].lineHeight - options.textStyles[1].fontSize,
    fontMetrics: options.defaultFontStack![0],
  })
  const mobileQuoteStyles = createStyleString(`rt-Quote`, {
    capHeight: options.textStyles[1].fontSize,
    lineGap: options.textStyles[1].lineHeight - options.textStyles[1].fontSize,
    fontMetrics: options.defaultFontStack![0],
  })
  const mobileCodeStyles = createStyleString(`rt-Code`, {
    capHeight: options.textStyles[1].fontSize * 0.95,
    lineGap: options.textStyles[1].lineHeight - options.textStyles[1].fontSize,
    fontMetrics: options.codingFontStack[0],
  })

  const textStyles = createStyleString(`rt-Text`, {
    capHeight: options.textStyles[2].fontSize,
    lineGap: options.textStyles[2].lineHeight - options.textStyles[2].fontSize,
    fontMetrics: options.defaultFontStack![0],
  })
  const emStyles = createStyleString(`rt-Em`, {
    capHeight: options.textStyles[2].fontSize,
    lineGap: options.textStyles[2].lineHeight - options.textStyles[2].fontSize,
    fontMetrics: options.defaultFontStack![0],
  })
  const quoteStyles = createStyleString(`rt-Quote`, {
    capHeight: options.textStyles[2].fontSize,
    lineGap: options.textStyles[2].lineHeight - options.textStyles[2].fontSize,
    fontMetrics: options.defaultFontStack![0],
  })

  const codeStyles = createStyleString(`rt-Code`, {
    capHeight: options.textStyles[2].fontSize * 0.95,
    lineGap: options.textStyles[2].lineHeight - options.textStyles[2].fontSize,
    fontMetrics: options.codingFontStack[0],
  })

  fs.writeFileSync(
    options.outputPath,
    Mustache.render(template, {
      headingFontFamiliy,
      defaultFontFamily,
      codingFontFamily,
      mobileFontData,
      fontData,
      mobileCodeFontData,
      codeFontData,
      mobileTextStyles,
      textStyles,
      mobileEmStyles,
      emStyles,
      mobileQuoteStyles,
      quoteStyles,
      mobileCodeStyles,
      codeStyles,
    })
  )
}

interface TextStyle {
  fontSize: number
  lineHeight: number
}

interface Options {
  outputPath: string
  textStyles?: TextStyle[]
  defaultFontStack?: FontMetrics[]
  headingFontStack?: FontMetrics[]
  codingFontStack?: FontMetrics[]
}
interface OptionsWithDefaults {
  outputPath: string
  textStyles: TextStyle[]
  defaultFontStack?: FontMetrics[]
  headingFontStack?: FontMetrics[]
  codingFontStack?: FontMetrics[]
}
export function capsizeRadixPlugin({
  outputPath,
  textStyles = [
    { fontSize: 9, lineHeight: 19 },
    { fontSize: 11, lineHeight: 23 },
    { fontSize: 12, lineHeight: 25 },
    { fontSize: 14, lineHeight: 28 },
    { fontSize: 18, lineHeight: 30 },
    { fontSize: 24, lineHeight: 36 },
    { fontSize: 36, lineHeight: 44 },
    { fontSize: 48, lineHeight: 52 },
    { fontSize: 64, lineHeight: 64 },
  ],
  defaultFontStack,
  headingFontStack,
  codingFontStack,
}: Options): Plugin {
  return {
    name: `radix-capsize-plugin`,
    buildStart() {
      generate({
        outputPath,
        textStyles,
        defaultFontStack,
        headingFontStack,
        codingFontStack,
      })
    },
  }
}
